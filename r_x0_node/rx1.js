const SerialPort = require('serialport')
const port = new SerialPort('/dev/cu.usbmodem14301', {
  baudRate: 57600
})

const commands = `0,322,400
2,0,0
0,322,409
0,322,424
0,322,449
0,322,458
0,322,474
0,322,485
0,322,497
0,322,511
0,322,528
0,322,544
0,322,554
0,322,569
0,322,588
0,322,608
0,322,629
0,322,646
0,322,665
0,322,683
0,322,696
2,0,1
0,325,400
2,0,0
0,325,409
0,325,424
0,325,449
0,325,458
0,325,474
0,325,485
0,325,497
0,325,511
0,325,528
0,325,544
0,325,554
0,325,569
0,325,588
0,325,608
0,325,629
0,325,646
0,325,665
0,325,683
0,325,696
2,0,1
0,328,400
2,0,0
0,328,409
0,328,424
0,328,449
0,328,458
0,328,474
0,328,485
0,328,497
0,328,511
0,328,528
0,328,544
0,328,554
0,328,569
0,328,588
0,328,608
0,328,629
0,328,646
0,328,665
0,328,683
0,328,696
2,0,1
0,331,400
2,0,0
0,331,409
0,331,424
0,331,449
0,331,458
0,331,474
0,331,485
0,331,497
0,331,511
0,331,528
0,331,544
0,331,554
0,331,569
0,331,588
0,331,608
0,331,629
0,331,646
0,331,665
0,331,683
0,331,696
2,0,1
0,334,400
2,0,0
0,334,409
0,334,424
0,334,449
0,334,458
0,334,474
0,334,485
0,334,497
0,334,511
0,334,528
0,334,544
0,334,554
0,334,569
0,334,588
0,334,608
0,334,629
0,334,646
0,334,665
0,334,683
0,334,696
2,0,1
0,337,400
2,0,0
0,337,409
0,337,424
0,337,449
0,337,458
0,337,474
0,337,485
0,337,497
0,337,511
0,337,528
0,337,544
0,337,554
0,337,569
0,337,588
0,337,608
0,337,629
0,337,646
0,337,665
0,337,683
0,337,696
2,0,1
0,340,400
2,0,0
0,340,409
0,340,424
0,340,449
0,340,458
0,340,474
0,340,485
0,340,497
0,340,511
0,340,528
0,340,544
0,340,554
0,340,569
0,340,588
0,340,608
0,340,629
0,340,646
0,340,665
0,340,683
0,340,696
2,0,1
0,343,400
2,0,0
0,343,409
0,343,424
0,343,449
0,343,458
0,343,474
0,343,485
0,343,497
0,343,511
0,343,528
0,343,544
0,343,554
0,343,569
0,343,588
0,343,608
0,343,629
0,343,646
0,343,665
0,343,683
0,343,696
2,0,1
0,346,400
2,0,0
0,346,409
0,346,424
0,346,449
0,346,458
0,346,474
0,346,485
0,346,497
0,346,511
0,346,528
0,346,544
0,346,554
0,346,569
0,346,588
0,346,608
0,346,629
0,346,646
0,346,665
0,346,683
0,346,696
2,0,1
0,349,400
2,0,0
0,349,409
0,349,424
0,349,449
0,349,458
0,349,474
0,349,485
0,349,497
0,349,511
0,349,528
0,349,544
0,349,554
0,349,569
0,349,588
0,349,608
0,349,629
0,349,646
0,349,665
0,349,683
0,349,696
2,0,1
0,352,400
2,0,0
0,352,409
0,352,424
0,352,449
0,352,458
0,352,474
0,352,485
0,352,497
0,352,511
0,352,528
0,352,544
0,352,554
0,352,569
0,352,588
0,352,608
0,352,629
0,352,646
0,352,665
0,352,683
0,352,696
2,0,1
0,355,400
2,0,0
0,355,409
0,355,424
0,355,449
0,355,458
0,355,474
0,355,485
0,355,497
0,355,511
0,355,528
0,355,544
0,355,554
0,355,569
0,355,588
0,355,608
0,355,629
0,355,646
0,355,665
0,355,683
0,355,696
2,0,1
0,358,400
2,0,0
0,358,409
0,358,424
0,358,449
0,358,458
0,358,474
0,358,485
0,358,497
0,358,511
0,358,528
0,358,544
0,358,554
0,358,569
0,358,588
0,358,608
0,358,629
0,358,646
0,358,665
0,358,683
0,358,696
2,0,1
0,361,400
2,0,0
0,361,409
0,361,424
0,361,449
0,361,458
0,361,474
0,361,485
0,361,497
0,361,511
0,361,528
0,361,544
0,361,554
0,361,569
0,361,588
0,361,608
0,361,629
0,361,646
0,361,665
0,361,683
0,361,696
2,0,1
0,364,400
2,0,0
0,364,409
0,364,424
0,364,449
0,364,458
0,364,474
0,364,485
0,364,497
0,364,511
0,364,528
0,364,544
0,364,554
0,364,569
0,364,588
0,364,608
0,364,629
0,364,646
0,364,665
0,364,683
0,364,696
2,0,1
0,367,400
2,0,0
0,367,409
0,367,424
0,367,449
0,367,458
0,367,474
0,367,485
0,367,497
0,367,511
0,367,528
0,367,544
0,367,554
0,367,569
0,367,588
0,367,608
0,367,629
0,367,646
0,367,665
0,367,683
0,367,696
2,0,1
0,523,400
2,0,0
0,523,409
0,523,424
0,523,449
0,523,458
0,523,474
0,523,485
0,523,497
0,523,511
0,523,528
0,523,544
0,523,554
0,523,569
0,523,588
0,523,608
0,523,629
0,523,646
0,523,665
0,523,683
0,523,696
2,0,1
0,526,400
2,0,0
0,526,409
0,526,424
0,526,449
0,526,458
0,526,474
0,526,485
0,526,497
0,526,511
0,526,528
0,526,544
0,526,554
0,526,569
0,526,588
0,526,608
0,526,629
0,526,646
0,526,665
0,526,683
0,526,696
2,0,1
0,529,400
2,0,0
0,529,409
0,529,424
0,529,449
0,529,458
0,529,474
0,529,485
0,529,497
0,529,511
0,529,528
0,529,544
0,529,554
0,529,569
0,529,588
0,529,608
0,529,629
0,529,646
0,529,665
0,529,683
0,529,696
2,0,1
0,532,400
2,0,0
0,532,409
0,532,424
0,532,449
0,532,458
0,532,474
0,532,485
0,532,497
0,532,511
0,532,528
0,532,544
0,532,554
0,532,569
0,532,588
0,532,608
0,532,629
0,532,646
0,532,665
0,532,683
0,532,696
2,0,1
0,535,400
2,0,0
0,535,409
0,535,424
0,535,449
0,535,458
0,535,474
0,535,485
0,535,497
0,535,511
0,535,528
0,535,544
0,535,554
0,535,569
0,535,588
0,535,608
0,535,629
0,535,646
0,535,665
0,535,683
0,535,696
2,0,1
0,538,400
2,0,0
0,538,409
0,538,424
0,538,449
0,538,458
0,538,474
0,538,485
0,538,497
0,538,511
0,538,528
0,538,544
0,538,554
0,538,569
0,538,588
0,538,608
0,538,629
0,538,646
0,538,665
0,538,683
0,538,696
2,0,1
0,541,400
2,0,0
0,541,409
0,541,424
0,541,449
0,541,458
0,541,474
0,541,485
0,541,497
0,541,511
0,541,528
0,541,544
0,541,554
0,541,569
0,541,588
0,541,608
0,541,629
0,541,646
0,541,665
0,541,683
0,541,696
2,0,1
0,544,400
2,0,0
0,544,409
0,544,424
0,544,449
0,544,458
0,544,474
0,544,485
0,544,497
0,544,511
0,544,528
0,544,544
0,544,554
0,544,569
0,544,588
0,544,608
0,544,629
0,544,646
0,544,665
0,544,683
0,544,696
2,0,1
0,547,400
2,0,0
0,547,409
0,547,424
0,547,449
0,547,458
0,547,474
0,547,485
0,547,497
0,547,511
0,547,528
0,547,544
0,547,554
0,547,569
0,547,588
0,547,608
0,547,629
0,547,646
0,547,665
0,547,683
0,547,696
2,0,1
0,550,400
2,0,0
0,550,409
0,550,424
0,550,449
0,550,458
0,550,474
0,550,485
0,550,497
0,550,511
0,550,528
0,550,544
0,550,554
0,550,569
0,550,588
0,550,608
0,550,629
0,550,646
0,550,665
0,550,683
0,550,696
2,0,1
0,553,400
2,0,0
0,553,409
0,553,424
0,553,449
0,553,458
0,553,474
0,553,485
0,553,497
0,553,511
0,553,528
0,553,544
0,553,554
0,553,569
0,553,588
0,553,608
0,553,629
0,553,646
0,553,665
0,553,683
0,553,696
2,0,1
0,556,400
2,0,0
0,556,409
0,556,424
0,556,449
0,556,458
0,556,474
0,556,485
0,556,497
0,556,511
0,556,528
0,556,544
0,556,554
0,556,569
0,556,588
0,556,608
0,556,629
0,556,646
0,556,665
0,556,683
0,556,696
2,0,1
0,559,400
2,0,0
0,559,409
0,559,424
0,559,449
0,559,458
0,559,474
0,559,485
0,559,497
0,559,511
0,559,528
0,559,544
0,559,554
0,559,569
0,559,588
0,559,608
0,559,629
0,559,646
0,559,665
0,559,683
0,559,696
2,0,1
0,562,400
2,0,0
0,562,409
0,562,424
0,562,449
0,562,458
0,562,474
0,562,485
0,562,497
0,562,511
0,562,528
0,562,544
0,562,554
0,562,569
0,562,588
0,562,608
0,562,629
0,562,646
0,562,665
0,562,683
0,562,696
2,0,1
0,565,400
2,0,0
0,565,409
0,565,424
0,565,449
0,565,458
0,565,474
0,565,485
0,565,497
0,565,511
0,565,528
0,565,544
0,565,554
0,565,569
0,565,588
0,565,608
0,565,629
0,565,646
0,565,665
0,565,683
0,565,696
2,0,1
0,568,400
2,0,0
0,568,409
0,568,424
0,568,449
0,568,458
0,568,474
0,568,485
0,568,497
0,568,511
0,568,528
0,568,544
0,568,554
0,568,569
0,568,588
0,568,608
0,568,629
0,568,646
0,568,665
0,568,683
0,568,696
2,0,1`.split('\n')

let cmd = 0;
console.log(commands[cmd] + '\r');
port.write(commands[cmd] + '\r')


port.on('data', function (data) {
  let text = data.toString('utf8').trim()

  console.log('_____')
  console.log(text)
  console.log(text.split('\n').find(line => line === 'executed\r'))
  console.log('_____')

  if (text.split('\n').find(line => line === 'executed\r')) {
    console.log('NEXT::')
    cmd ++;
    if (cmd >= commands.length) {
      console.log('DONE')
      return
    }
    console.log(commands[cmd], cmd)
    port.write(commands[cmd] + '\r')
  } else {
    console.log('__')
    // console.log()
  }
  // const input = data.toString('utf8').trim()
  // if (isNaN(+input)) {
  //   console.log(input)
  //   return
  // }
  // const i = +input + 1
  // if (i < commands.length) {
  //   console.log(`${i}/${commands.length}`)
  //   sendCommand(i)
  // } else if (i === commands.length){
  //   console.log(`${i}/${commands.length}`)
  //   port.write('0,0,0,0\r')
  // } else if (i === commands.length + 1){
  //   console.log('complete')
  // }
})
